package com.magic.lineone.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

public class DbLineone extends DatabaseAdapter {

    private static final Map <String, DbLineone> instanceMap   = new HashMap <String, DbLineone> ();

    private static final Object                  singletonLock = new Object ();

    public DbLineone (String jdbcurl) {

        super (jdbcurl);
    }

    public static DbLineone getInstance (String url) {

        if (!instanceMap.containsKey (url)) {
            synchronized (singletonLock) {
                if (!instanceMap.containsKey (url)) {
                    instanceMap.put (url, new DbLineone (url));
                }
            }
        }
        return instanceMap.get (url);
    }

    public List <Map <String, String>> getLineone (String userID, int pagenum, int pagesize) {

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        List <Map <String, String>> ret = new ArrayList <Map <String, String>> ();

        try {
            conn = getConnection ();
            stmt = conn
                    .prepareStatement ("select id,content,createTime from lineone where userid=? order by createTime DESC limit ?,?");

            stmt.setString (1, userID);

            stmt.setInt (2, pagesize * (pagenum - 1));
            stmt.setInt (3, pagesize);

            rs = stmt.executeQuery ();

            while (rs.next ()) {
                Map <String, String> map = new HashMap <String, String> ();
                map.put ("id", rs.getString ("id"));
                map.put ("content", rs.getString ("content"));
                map.put ("createtime", rs.getString ("createTime"));
                ret.add (map);
            }
        }
        catch (SQLException e) {
            Logger.getLogger (this.getClass ()).error (e, e);
        }
        finally {
            if (rs != null) {
                try {
                    rs.close ();
                }
                catch (SQLException e) {
                    Logger.getLogger (this.getClass ()).error (e, e);
                }
            }
            if (stmt != null) {
                try {
                    stmt.close ();
                }
                catch (SQLException e) {
                    Logger.getLogger (this.getClass ()).error (e, e);
                }
            }
            if (conn != null) {
                try {
                    conn.close ();
                }
                catch (SQLException e) {
                    Logger.getLogger (this.getClass ()).error (e, e);
                }
            }
        }
        return ret;
    }

    public int insert (String content, String userid) {

        int lineoneID = 0;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = getConnection ();
            stmt = conn.prepareStatement ("insert into lineone(content,userid,createTime) values(?,?,now())",
                    Statement.RETURN_GENERATED_KEYS);

            stmt.setString (1, content);
            stmt.setString (2, userid);

            if (email == null) {
                stmt.setNull (4, Types.VARCHAR);
            }
            else {
                stmt.setString (4, email);
            }

            if (phone == null) {
                stmt.setNull (5, Types.VARCHAR);
            }
            else {
                stmt.setString (5, phone);
            }

            int affected = stmt.executeUpdate ();

            if (affected == 1) {
                Logger.getLogger (this.getClass ()).error ("insert user success! " + "username:" + username);

                rs = stmt.getGeneratedKeys ();

                while (rs.next ()) {
                    userid = rs.getInt (1);
                    return userid;
                }
            }
        }
        catch (SQLException e) {
            Logger.getLogger (this.getClass ()).error (e, e);
        }
        finally {
            if (rs != null) {
                try {
                    rs.close ();
                }
                catch (SQLException e) {
                    Logger.getLogger (this.getClass ()).error (e, e);
                }
            }
            if (stmt != null) {
                try {
                    stmt.close ();
                }
                catch (SQLException e) {
                    Logger.getLogger (this.getClass ()).error (e, e);
                }
            }
            if (conn != null) {
                try {
                    conn.close ();
                }
                catch (SQLException e) {
                    Logger.getLogger (this.getClass ()).error (e, e);
                }
            }
        }
        return userid;
    }

}
